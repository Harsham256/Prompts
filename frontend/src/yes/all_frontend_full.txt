
// =========================
// index.html (root)
// =========================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Title Verification System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// =========================
// package.json (root)
// =========================
{
  "name": "title-verification-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^5.2.0"
  }
}

// =========================
// package-lock.json (root) - skeleton (auto-generated normally)
// =========================
{
  "name": "title-verification-frontend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "axios": "^1.6.7",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router-dom": "^6.28.0"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.2.1",
        "vite": "^5.2.0"
      }
    }
  }
}

// =========================
// vite.config.js (root)
// =========================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    open: true,
    proxy: {
      "/api": {
        target: "http://localhost:5000",
        changeOrigin: true,
        secure: false
      }
    }
  }
});

// =========================
// src/main.jsx
// =========================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// =========================
// src/App.jsx
// =========================
import React from "react";
import { BrowserRouter, Routes, Route, Link } from "react-router-dom";
import UserDashboard from "./pages/UserDashboard";
import AdminDashboard from "./pages/AdminDashboard";
import RegisterForm from "./components/RegisterForm";
import LoginForm from "./components/LoginForm";

export default function App() {
  return (
    <BrowserRouter>
      <div>
        <nav style={{ padding: 10, borderBottom: "1px solid #ddd" }}>
          <Link to="/" style={{ marginRight: 8 }}>Home</Link>
          <Link to="/register" style={{ marginRight: 8 }}>Register</Link>
          <Link to="/login" style={{ marginRight: 8 }}>Login</Link>
          <Link to="/user" style={{ marginRight: 8 }}>User</Link>
          <Link to="/admin">Admin</Link>
        </nav>

        <div style={{ padding: 12 }}>
          <Routes>
            <Route path="/" element={<div>Welcome â€” choose Register, Login, User or Admin</div>} />
            <Route path="/register" element={<RegisterForm />} />
            <Route path="/login" element={<LoginForm />} />
            <Route path="/user" element={<UserDashboard />} />
            <Route path="/admin" element={<AdminDashboard />} />
          </Routes>
        </div>
      </div>
    </BrowserRouter>
  );
}

// =========================
// src/services/api.js
// =========================
import axios from "axios";
import { getToken } from "../utils/tokenHelper";

const API_BASE = process.env.REACT_APP_API_BASE || "http://localhost:5000/api";

const instance = axios.create({
  baseURL: API_BASE,
  timeout: 30000,
});

instance.interceptors.request.use((config) => {
  const token = getToken();
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

export async function registerUser(payload) {
  return instance.post("/auth/register", payload);
}

export async function loginUser(payload) {
  return instance.post("/auth/login", payload);
}

export async function uploadDocument(file) {
  const form = new FormData();
  form.append("file", file);
  return instance.post("/document/extract", form, {
    headers: { "Content-Type": "multipart/form-data" },
  });
}

export async function applyForLoan(body) {
  return instance.post("/loan/apply", body);
}

export async function getUsers() {
  return instance.get("/admin/users");
}
export async function addUser(user) {
  return instance.post("/admin/users", user);
}
export async function updateUser(id, user) {
  return instance.put(`/admin/users/${id}`, user);
}
export async function deleteUser(id) {
  return instance.delete(`/admin/users/${id}`);
}
export async function getAllApplications() {
  return instance.get("/admin/applications");
}
export async function approveApplication(id) {
  return instance.post(`/admin/applications/${id}/approve`);
}
export async function rejectApplication(id, reason) {
  return instance.post(`/admin/applications/${id}/reject`, { reason });
}

export default instance;

// =========================
// src/utils/tokenHelper.js
// =========================
const TOKEN_KEY = "tv_token";
const USER_KEY = "tv_user";

export function saveToken(token) {
  localStorage.setItem(TOKEN_KEY, token);
}

export function getToken() {
  return localStorage.getItem(TOKEN_KEY);
}

export function removeToken() {
  localStorage.removeItem(TOKEN_KEY);
  localStorage.removeItem(USER_KEY);
}

export function saveUser(user) {
  try {
    localStorage.setItem(USER_KEY, JSON.stringify(user));
  } catch (e) {}
}

export function getUser() {
  try {
    return JSON.parse(localStorage.getItem(USER_KEY) || "null");
  } catch (e) {
    return null;
  }
}

// =========================
// src/utils/ocr.js
// =========================
export function readFileAsDataURL(file) {
  return new Promise((res, rej) => {
    const fr = new FileReader();
    fr.onload = () => res(fr.result);
    fr.onerror = rej;
    fr.readAsDataURL(file);
  });
}

export function readFileAsText(file) {
  return new Promise((res, rej) => {
    const fr = new FileReader();
    fr.onload = () => res(fr.result);
    fr.onerror = rej;
    fr.readAsText(file);
  });
}

// =========================
// src/components/RegisterForm.jsx
// =========================
import React, { useState } from "react";
import { registerUser } from "../services/api";
import { saveToken, saveUser } from "../utils/tokenHelper";
import { useNavigate } from "react-router-dom";

export default function RegisterForm() {
  const [form, setForm] = useState({
    fullName: "",
    email: "",
    password: "",
    aadhaar: "",
    pan: "",
    landId: "",
    latitude: "",
    longitude: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const nav = useNavigate();

  const onChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const onSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      const { data } = await registerUser({
        FullName: form.fullName,
        Email: form.email,
        Password: form.password,
        Aadhaar: form.aadhaar,
        Pan: form.pan,
        LandId: form.landId,
        Latitude: parseFloat(form.latitude) || 0,
        Longitude: parseFloat(form.longitude) || 0,
      });
      if (data?.token) {
        saveToken(data.token);
        saveUser({ email: form.email, fullName: form.fullName });
      }
      nav("/user");
    } catch (err) {
      setError(err?.response?.data?.message || err.message || "Register failed");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={onSubmit} style={{ maxWidth: 480 }}>
      <h2>Register</h2>
      {error && <div style={{ color: "red" }}>{error}</div>}
      <div>
        <label>Full name</label>
        <input name="fullName" value={form.fullName} onChange={onChange} required />
      </div>
      <div>
        <label>Email</label>
        <input name="email" type="email" value={form.email} onChange={onChange} required />
      </div>
      <div>
        <label>Password</label>
        <input name="password" type="password" value={form.password} onChange={onChange} required />
      </div>
      <div>
        <label>Aadhaar</label>
        <input name="aadhaar" value={form.aadhaar} onChange={onChange} />
      </div>
      <div>
        <label>PAN</label>
        <input name="pan" value={form.pan} onChange={onChange} />
      </div>
      <div>
        <label>Land ID (if known)</label>
        <input name="landId" value={form.landId} onChange={onChange} />
      </div>
      <div>
        <label>Latitude</label>
        <input name="latitude" value={form.latitude} onChange={onChange} />
      </div>
      <div>
        <label>Longitude</label>
        <input name="longitude" value={form.longitude} onChange={onChange} />
      </div>
      <button type="submit" disabled={loading}>{loading ? "Registering..." : "Register"}</button>
    </form>
  );
}

// =========================
// src/components/LoginForm.jsx
// =========================
import React, { useState } from "react";
import { loginUser } from "../services/api";
import { saveToken, saveUser } from "../utils/tokenHelper";
import { useNavigate } from "react-router-dom";

export default function LoginForm() {
  const [form, setForm] = useState({ email: "", password: "" });
  const [error, setError] = useState("");
  const nav = useNavigate();
  const onChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const onSubmit = async (e) => {
    e.preventDefault();
    setError("");
    try {
      const { data } = await loginUser({ Email: form.email, Password: form.password });
      if (data.token) {
        saveToken(data.token);
        saveUser({ email: form.email });
        nav("/user");
      } else {
        setError("Login succeeded but token missing from backend response.");
      }
    } catch (err) {
      setError(err?.response?.data?.message || err.message || "Login failed");
    }
  };

  return (
    <form onSubmit={onSubmit} style={{ maxWidth: 420 }}>
      <h2>Login</h2>
      {error && <div style={{ color: "red" }}>{error}</div>}
      <div>
        <label>Email</label>
        <input name="email" value={form.email} onChange={onChange} required />
      </div>
      <div>
        <label>Password</label>
        <input name="password" type="password" value={form.password} onChange={onChange} required />
      </div>
      <button type="submit">Login</button>
    </form>
  );
}

// =========================
// src/components/DocumentUpload.jsx
// =========================
import React, { useState } from "react";
import { uploadDocument } from "../services/api";
import { readFileAsDataURL } from "../utils/ocr";

export default function DocumentUpload({ onUploaded }) {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState("");
  const [serverResult, setServerResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const onFileChange = async (e) => {
    setError("");
    const f = e.target.files[0];
    setFile(f);
    if (!f) {
      setPreview("");
      return;
    }
    if (f.type.includes("image") || f.type.includes("pdf")) {
      const url = URL.createObjectURL(f);
      setPreview(url);
    } else {
      const data = await readFileAsDataURL(f);
      setPreview(data);
    }
  };

  const onUpload = async () => {
    if (!file) return setError("Choose a file first");
    setError("");
    setLoading(true);
    try {
      const { data } = await uploadDocument(file);
      setServerResult(data);
      onUploaded && onUploaded(data);
    } catch (err) {
      setError(err?.response?.data || err.message || "Upload failed");
    } finally {
      setLoading(false);
    }
  };

  const onConfirmAndApply = () => {
    onUploaded && onUploaded(serverResult || { LandId: "NotFound" }, file);
  };

  return (
    <div style={{ maxWidth: 720 }}>
      <h3>Upload Document</h3>
      <input type="file" accept="image/*,.pdf" onChange={onFileChange} />
      {error && <div style={{ color: "red" }}>{error}</div>}
      {preview && (
        <div style={{ marginTop: 8 }}>
          {file?.type && file.type.includes("pdf") ? (
            <iframe title="pdf-preview" src={preview} width="100%" height="500px"></iframe>
          ) : (
            <img src={preview} alt="preview" style={{ maxWidth: "100%", maxHeight: 500 }} />
          )}
        </div>
      )}
      <div style={{ marginTop: 8 }}>
        <button onClick={onUpload} disabled={!file || loading}>
          {loading ? "Uploading..." : "Extract & Send to Admin"}
        </button>
        &nbsp;
        <button onClick={onConfirmAndApply} disabled={!serverResult}>
          Confirm & Apply (send application)
        </button>
      </div>

      {serverResult && (
        <div style={{ marginTop: 10 }}>
          <h4>Server result</h4>
          <pre style={{ whiteSpace: "pre-wrap", background: "#f6f6f6", padding: 8 }}>
            {JSON.stringify(serverResult, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
}

// =========================
// src/components/LandDetailsForm.jsx
// =========================
import React, { useState } from "react";

export default function LandDetailsForm({ initial = {}, onSubmit }) {
  const [form, setForm] = useState({
    landId: initial.landId || "",
    ownerName: initial.ownerName || "",
    hasSiblingApproval: initial.hasSiblingApproval || false,
  });

  const change = (e) => {
    const { name, value, type, checked } = e.target;
    setForm((s) => ({ ...s, [name]: type === "checkbox" ? checked : value }));
  };

  const submit = (e) => {
    e.preventDefault();
    onSubmit && onSubmit(form);
  };

  return (
    <form onSubmit={submit} style={{ maxWidth: 520 }}>
      <h3>Land Details</h3>
      <div>
        <label>Land ID</label>
        <input name="landId" value={form.landId} onChange={change} required />
      </div>
      <div>
        <label>Owner name on land docs</label>
        <input name="ownerName" value={form.ownerName} onChange={change} required />
      </div>
      <div>
        <label>
          <input name="hasSiblingApproval" type="checkbox" checked={form.hasSiblingApproval} onChange={change} />
          Sibling approval (if inherited)
        </label>
      </div>
      <button type="submit">Apply</button>
    </form>
  );
}

// =========================
// src/components/ResultDisplay.jsx
// =========================
import React from "react";

export default function ResultDisplay({ result }) {
  if (!result) return null;
  return (
    <div style={{ marginTop: 12 }}>
      <h3>Verification Result</h3>
      <div>
        <strong>Status:</strong> {result.Status || result.status || "Unknown"}
      </div>
      <div>
        <strong>Reason:</strong> {result.Reason || result.reason || result.DecisionReason || "â€”"}
      </div>
      <pre style={{ background: "#fafafa", padding: 8, marginTop: 8 }}>{JSON.stringify(result, null, 2)}</pre>
    </div>
  );
}

// =========================
// src/pages/UserDashboard.jsx
// =========================
import React, { useState } from "react";
import DocumentUpload from "../components/DocumentUpload";
import LandDetailsForm from "../components/LandDetailsForm";
import ResultDisplay from "../components/ResultDisplay";
import { applyForLoan } from "../services/api";

export default function UserDashboard() {
  const [extracted, setExtracted] = useState(null);
  const [applicationResult, setApplicationResult] = useState(null);
  const [applying, setApplying] = useState(false);
  const [error, setError] = useState("");

  async function handleUploaded(serverResult, file) {
    setExtracted(serverResult);
  }

  async function handleApply(landForm) {
    setError("");
    setApplying(true);
    try {
      const body = {
        LandId: landForm.landId,
        OwnerName: landForm.ownerName,
        HasSiblingApproval: !!landForm.hasSiblingApproval,
        UserId: 0
      };
      const { data } = await applyForLoan(body);
      setApplicationResult(data);
    } catch (err) {
      setError(err?.response?.data?.message || err.message || "Apply failed");
    } finally {
      setApplying(false);
    }
  }

  return (
    <div style={{ padding: 16 }}>
      <h1>User Dashboard</h1>
      <p>Upload your land document, preview, and confirm. Admin will approve for verification.</p>

      <DocumentUpload onUploaded={handleUploaded} />

      {extracted && (
        <div style={{ marginTop: 12 }}>
          <h4>Extracted land details</h4>
          <pre style={{ background: "#f5f5f5", padding: 8 }}>{JSON.stringify(extracted, null, 2)}</pre>
          <LandDetailsForm
            initial={{ landId: extracted?.LandId || "" }}
            onSubmit={(form) => handleApply(form)}
          />
          {error && <div style={{ color: "red" }}>{error}</div>}
          {applicationResult && <ResultDisplay result={applicationResult} />}
          {applying && <div>Applying...</div>}
        </div>
      )}
    </div>
  );
}

// =========================
// src/pages/AdminDashboard.jsx
// =========================
import React, { useEffect, useState } from "react";
import { getUsers, getAllApplications, approveApplication, rejectApplication, deleteUser } from "../services/api";

export default function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [apps, setApps] = useState([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState("");

  useEffect(() => {
    loadAll();
  }, []);

  async function loadAll() {
    setLoading(true);
    setErr("");
    try {
      const [u, a] = await Promise.all([getUsers(), getAllApplications()]);
      setUsers(u.data || []);
      setApps(a.data || []);
    } catch (e) {
      setErr(e?.message || "Failed");
    } finally {
      setLoading(false);
    }
  }

  async function onApprove(id) {
    await approveApplication(id);
    await loadAll();
  }

  async function onReject(id) {
    const reason = prompt("Reason for rejection?");
    if (!reason) return;
    await rejectApplication(id, reason);
    await loadAll();
  }

  async function onDeleteUser(id) {
    if (!window.confirm("Delete user?")) return;
    await deleteUser(id);
    await loadAll();
  }

  return (
    <div style={{ padding: 16 }}>
      <h1>Admin Dashboard</h1>
      {err && <div style={{ color: "red" }}>{err}</div>}
      {loading && <div>Loading...</div>}

      <section style={{ marginTop: 12 }}>
        <h3>Pending Applications</h3>
        {apps.length === 0 && <div>No applications</div>}
        <ul>
          {apps.map((a) => (
            <li key={a.id} style={{ marginBottom: 8 }}>
              <div>
                <strong>App #{a.id}</strong> â€” Land: {a.landId || a.LandId} â€” User: {a.userId}
              </div>
              <div>
                <button onClick={() => onApprove(a.id)}>Approve</button>{" "}
                <button onClick={() => onReject(a.id)}>Reject</button>
              </div>
            </li>
          ))}
        </ul>
      </section>

      <section style={{ marginTop: 20 }}>
        <h3>Users</h3>
        <ul>
          {users.map((u) => (
            <li key={u.id} style={{ marginBottom: 8 }}>
              {u.fullName || u.FullName} â€” {u.email || u.Email}
              {" "}
              <button onClick={() => onDeleteUser(u.id)} style={{ marginLeft: 8 }}>Delete</button>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
}

// =========================
// src/admin/UserList.jsx
// =========================
import React from "react";

export default function UserList({ users = [], onEdit, onDelete }) {
  return (
    <div>
      <h4>Users</h4>
      <ul>
        {users.map((u) => (
          <li key={u.id}>
            {u.fullName || u.FullName} â€” {u.email || u.Email}
            <button onClick={() => onEdit && onEdit(u)}>Edit</button>
            <button onClick={() => onDelete && onDelete(u.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

// =========================
// src/admin/EditUser.jsx
// =========================
import React, { useState } from "react";

export default function EditUser({ user, onCancel, onSave }) {
  const [form, setForm] = useState({
    fullName: user?.fullName || user?.FullName || "",
    email: user?.email || user?.Email || "",
  });

  const change = (e) => setForm(s => ({ ...s, [e.target.name]: e.target.value }));

  return (
    <form onSubmit={(e) => { e.preventDefault(); onSave && onSave(form); }}>
      <div>
        <label>Full name</label>
        <input name="fullName" value={form.fullName} onChange={change} />
      </div>
      <div>
        <label>Email</label>
        <input name="email" value={form.email} onChange={change} />
      </div>
      <button type="submit">Save</button>
      <button type="button" onClick={onCancel}>Cancel</button>
    </form>
  );
}

// =========================
// src/admin/StopLoanButton.jsx
// =========================
import React, { useState } from "react";

export default function StopLoanButton({ appId, onStopped }) {
  const [loading, setLoading] = useState(false);

  async function stop() {
    if (!window.confirm("Stop this loan?")) return;
    setLoading(true);
    try {
      await fetch(`/api/admin/applications/${appId}/stop`, { method: "POST" });
      onStopped && onStopped();
    } catch (e) {
      alert("Failed to stop");
    } finally {
      setLoading(false);
    }
  }

  return <button onClick={stop} disabled={loading}>{loading ? "Stopping..." : "Stop loan"}</button>;
}
